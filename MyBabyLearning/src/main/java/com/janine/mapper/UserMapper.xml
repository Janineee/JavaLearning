<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--动态代理开发规则：
    namespace必须是接口的全路径名！！！
    接口的方法名必须与 sql id 一致
    接口的入参与 parameterType 一致
    接口的返回值与 resultType 一致
-->


<!--用于隔离sql语句-->
<mapper namespace="com.janine.mapper.UserMapper">

    <select id="getUserById" parameterType="int" resultType="user">
        <!--<select id="getUserById" parameterType="int" resultType="com.janine.pojo.User">-->
        select * from `user` where `id` = #{id};
    </select>

    <!--如果返回结果为集合，只要设置为每一个的数据类型-->
    <select id="getUserByUserName" parameterType="string" resultType="com.janine.pojo.User">
        select *
        from `user`
        where `username` like "%${value}%"

        --         select * from `user` where `username` like "%张%"

    </select>

    <!--useGeneratedKeys:使用自增，keyProperty与之配套使用，这里是主键-->
    <insert id="insertUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        <!--selectKey主键返回，
            keyProperty是主键属性，
            resultType主键数据类型，
            order指定selectKey何时执行，after之后
        -->
        <!--<selectKey keyProperty="id" resultType="int" order="AFTER">-->
        <!--select last_insert_id()-->
        <!--</selectKey>-->
        insert into `user` (`username`, `birthday`, `sex`, `address`) values (#{username}, #{birthday}, #{sex},
        #{address});
    </insert>

    <!--<update id="updateUser" parameterType="com.janine.pojo.User">-->
    <!--update `user` set `username` = #{username} where `id` = #{id};-->
    <!--</update>-->


    <!--抽取sql-->
    <sql id="selectAllUser">
        select *
        from `user`
    </sql>

    <select id="getUserByPojo" parameterType="User" resultType="com.janine.pojo.User">
        # 引用抽取的sql
        <include refid="selectAllUser"></include>
        <where>
            <if test="username != null and username != ''">
                and username like '%${username}%'
            </if>
            <if test="sex != null and sex != ''">
                and sex != #{sex}
            </if>
        </where>
    </select>


    <select id="getUserByIds" parameterType="QueryVo" resultType="User">
        <include refid="selectAllUser"/>
        <where>
            # foreach循环标签，collection要遍历的集合，open循环开始之前输出的内容，separator分隔符，close循环结束后输出的内容
            <foreach collection="ids" open="id in(" item="uId" separator="," close=")">
                #{uId}
            </foreach>
        </where>
    </select>

    <resultMap id="user_order_map" type="User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="address" column="address"/>
        <!--<result property="birthday" column="birthday"/>-->
        <!--<result property="sex" column="sex"/>-->

        <!--ofType用于配置一对多的类型，支持别名-->
        <collection property="orderList" ofType="Order">
            <!--<id property="id" column="id"/>-->
            <result property="userId" column="user_id"/>
            <!--<result property="number" column="number"/>-->
            <!--<result property="createtime" column="createtime"/>-->
            <result property="note" column="note"/>
        </collection>
    </resultMap>

    <select id="getUserOrderMap" parameterType="User" resultMap="user_order_map">
        select u.`id`, u.`username`, u.`address`, o.`id`, o.`user_id`, o.`note`

        from `user` u
                 left join `order` o on o.`user_id` = u.`id`
    </select>


</mapper>
